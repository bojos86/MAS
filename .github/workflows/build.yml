name: Build Flutter APK (Release with Debug Fallback)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx4g -Dfile.encoding=UTF-8'"
      JAVA_TOOL_OPTIONS: "-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Flutter doctor (for logs)
        run: flutter doctor -v

      - name: Pub get
        run: flutter pub get

      # أحيانًا ينظف مشاكل Gradle/SDK
      - name: Gradle clean
        run: ./android/gradlew -p android clean || true

      # ====== Build Release (مع لوج تفصيلي) ======
      - name: Build APK (release, split per ABI)
        run: |
          set -e
          flutter build apk --release --split-per-abi -v || true
          echo "=== Done release build step (errors ignored to allow logs upload) ==="

      # اطبع أي لوجات أنشأها Flutter أثناء الـbuild
      - name: Show Flutter build logs (if any)
        if: always()
        run: |
          echo "=== Try to print flutter_* logs ==="
          find . -maxdepth 2 -type f -name "flutter_*.log" -print -exec sh -c 'echo "-----"; echo ">> {}"; echo "-----"; tail -n +1 "{}"' \; || true

      # اعرض شجرة المخرجات لتشخيص المسارات
      - name: List outputs (for debugging)
        if: always()
        run: |
          echo "=== build/app/outputs ==="
          ls -R build/app/outputs || true
          echo "=== android/app/build/outputs ==="
          ls -R android/app/build/outputs || true

      # ====== Fallback: جرّب Debug إذا ما طلعت APKs ======
      - name: Fallback build (debug) if no APKs found
        run: |
          if ! ls build/app/outputs/flutter-apk/*.apk >/dev/null 2>&1 && \
             ! ls android/app/build/outputs/apk/**/*.apk >/dev/null 2>&1; then
            echo "No release APKs found. Building DEBUG as fallback..."
            flutter build apk --debug -v || true
            echo "=== Debug build finished (errors ignored to allow artifact upload) ==="
          else
            echo "Release APKs exist. Skipping debug fallback."
          fi

      # ارفع أي APK يجدها (Release أو Debug أو Gradle)
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: MAS-APK
          if-no-files-found: warn
          path: |
            build/app/outputs/flutter-apk/*.apk
            android/app/build/outputs/apk/**/*.apk
